name: AWS SSM Parameters
description: Checks to see if exists, if not it will create it. If exist, it will check to see that is current and up to date.

branding:
  icon: layers
  color: orange

inputs:
  layern-name:
    description: Name for the Lambda Layer
    required: true
  layerdirectory:
    description: Working directory in repository where requirements file exists
    required: true
  runtime:
    description: AWS Lambda Runtime
    required: true
  bucketname:
    description: AWS S3 Bucket Name where layer will be uploaded
    required: true
  prefix-folder-path:
    description: A prefix that will be used for a folder path inside the S3 bucket
    required: true
  principal:
    description: An AWS Account ID to grant layer usage permissions to.  
    required: true
  # compatible-runtimes:
  #   description: A list of compatible function runtimes . Used for filtering with ListLayers and ListLayerVersions.

runs:
  using: 'composite'
  steps:

    - name: Install Python Requirements
      run: |
        mkdir -p python && pip install -r requirements.txt -t ./python
        zip -r lambda_layer.zip ./python
      working-directory: ${{ inputs.layerdirectory }}
      if: ${{ inputs.runtime }} == "python"

    - name: Install Node Requirements
      run: |
        mkdir -p nodejs/node_modules && npm install -r requirements.txt -t ./nodejs/node_modules
        zip -r lambda_layer.zip ./nodejs/node_modules
      working-directory: ${{ inputs.layerdirectory }}
      if: ${{ inputs.runtime }} == "node"

    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: lambda-layer
    #     path: ./${{ inputs.layerdirectory }}/lambda_layer.zip

    - name: Installing boto3
      run: pip3 install boto3
      shell: bash

    - name: Upload Zip and Create Layer
        id: build-layer
        working-directory: ${{ inputs.layerdirectory }}
        run: |
          DATE=$(date +"%d_%m_%Y")
          FOLDER_PATH="${{ inputs.prefix-folder-path }}/${DATE}"
          LAYER_NAME="${{ inputs.layern-name }}-${DATE}"
          aws s3 cp ./lambda_layer.zip s3://${{ inputs.bucketname }}/${{ inputs.prefix-folder-path }}/lambda_layer.zip
          response=$(aws lambda publish-layer-version --layer-name ${{ inputs.layern-name }} \
          --description "${{ inputs.layern-name }} Layer" \
          --content S3Bucket=${{ inputs.bucketname }},S3Key=${{ inputs.prefix-folder-path }}/lambda_layer.zip

        layer_version=$(echo $response | jq -r '.Version')
        echo "::set-output name=layer_version::$(echo $response | jq -r '.Version')"
        echo "::set-output name=layer_arn::$(echo $response | jq -r '.LayerArn')"
        echo "::set-output name=layer_name::${{ inputs.layern-name }}"

    - name: Lambda Layer Permission
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          aws lambda add-layer-version-permission --layer-name ${{ steps.build-layer.outputs.layer_name }} \
          --version-number ${{ steps.build-layer.outputs.layer_version }} --action lambda:GetLayerVersion \
          --statement-id GrantAccountAccess --principal ${{ inputs.principal }}
